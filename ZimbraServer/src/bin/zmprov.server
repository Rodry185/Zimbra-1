#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2010 Zimbra, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

use strict;
use lib "/opt/zimbra/zimbramon/lib";

use Zimbra::ZmClient;
use Fcntl;             # for sysopen
use POSIX;
use IPC::Open2;
use IO::Handle;
use IO::Socket;
use Net::Server;
use Net::Server::PreForkSimple;

our $port = 1188;

$SIG{CHLD} = 'IGNORE';

sub daemon {
	package ZmProv;
	use base qw (Net::Server::PreForkSimple);
	# use base qw (Net::Server);
	# use base (Net::Server::Multiplex);

	# Set the ps name for debugging
	$0 = "ZimbraZmProvServer";
	open (STDERR, ">/dev/null");

	# sub mux_input {

	sub process_request {
		my $self = shift;
		my $fbuf;
		my $buf;

		eval {
			local $SIG{ALRM} = sub { die "alarm\n" };
			alarm(60); # avoid timeouts when mailstore is down
			while (<STDIN>) {
				chomp;
				my $answer = ZmClient::sendZmprovRequest($_); # force a scalar response
				print $answer;
				close STDOUT;
				($answer =~ /^ERROR: service/) && $self->server_close;
				return;
			}
		};
		if ($@) { $self->server_close; }
	}

	sub pre_loop_hook {
		ZmClient::init();
	}

	eval {
		ZmProv->run(proto => "tcp",
			pid_file => "/opt/zimbra/data/tmp/zmprov.pid",
			user => "zimbra",
			group => "zimbra",
			background => 1,
			setsid => 1,
			max_requests => 1000,
			max_servers => 1, # Avoid caching in the ldap processes
			host => 'localhost',
			port => $main::port) || die $!;
	};
	# print $@;
	exit 0;
}

# zmprov [args] [cmd] [cmd-args ...]
#
#  -h/--help                             display usage
#  -f/--file                             use file as input stream
#  -s/--server   {host}[:{port}]         server hostname and optional port
#  -l/--ldap                             provision via LDAP instead of SOAP
#  -L/--logpropertyfile                  log4j property file, valid only with -l
#  -a/--account  {name}                  account name to auth as
#  -p/--password {pass}                  password for account
#  -P/--passfile {file}                  read password from file
#  -z/--zadmin                           use zimbra admin name/password from localconfig for admin/password
#  -y/--authtoken {authtoken}            use auth token string(has to be in JSON format) from command line
#  -Y/--authtokenfile {authtoken file}   use auth token string(has to be in JSON format) from command line
#  -v/--verbose                          verbose mode (dumps full exception stack trace)
#  -d/--debug                            debug mode (dumps SOAP messages)
#  -m/--master                           use LDAP master (only valid with -l)

my $argstr = join(" ",@ARGV);

# We want to call ProvUtil if any flag other than -l is passed
if ($argstr =~ m/(-[hfsLapPyYvdm]|^exit|^quit)/i) {
	exec ("/opt/zimbra/bin/zmjava","com.zimbra.cs.account.ProvUtil",@ARGV);
	die "exec failed!";
}

# Launch ProvUtil for an interactive session, too
if ($#ARGV < 1) {
	if (!defined $ARGV[0] || $ARGV[0] eq "-l") {
		exec ("/opt/zimbra/bin/zmjava","com.zimbra.cs.account.ProvUtil",@ARGV);
		die "exec failed!";
	}
}

# just always fork, and let the child die if the daemon is already running.
if (fork()) {

	select(undef, undef, undef, 0.2);  # sleep 1/5th second

	my $buf;
	my $sock = new IO::Socket::INET6 (PeerAddr => 'localhost',
		      PeerPort => $port,
		      Proto    => 'tcp') || die "$!";

	print $sock $argstr,"\n";

	while (sysread($sock, $buf, 8192)) {
		print $buf;
	}
	print "\n";
} else {
	daemon();
}

__END__
